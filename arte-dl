#!/usr/bin/env python2

# 2010-2012 Georg Sauthoff, mail@georg.so,
#                           gsauthof@sdf.lonestar.org
# License: GPL v3+

program_version = "1.0"

import subprocess
import urllib2
import re
import sys
import os.path
import time
import logging

log = logging.getLogger("artedl")
log.setLevel(logging.INFO)

handler = logging.StreamHandler()
handler .setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s",
                              #'%a, %d %b %Y %H:%M:%S')
                              '%H:%M:%S')
handler.setFormatter(formatter)
log.addHandler(handler)

std_headers = {
        'User-Agent': 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100720 Firefox/3.6.7',
        'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-us,en;q=0.5',
}

# class="vote {ajaxUrl:\'/de/do_delegate/videos/hauptsache_haltbar-6772040,view,ratingForm.html\'}"
id_re = re.compile('class="vote .ajaxUrl:..?(/../do_delegate/videos/)([^,]+),view,ratingForm.html')

url_re = re.compile('<url quality="([^"]+)">([^<]+)<')

retry_re = re.compile('Download may be incomplete \([^)]+\), try resuming')

packerr_re = re.compile('ERROR: ReadPacket, failed to read RTMP packet header')

restricted_re = re.compile('carton_23h_..\.mp4')

fallback_re = re.compile('fallback_..\.mp4')

errors = False

def fetch(url):
  log.debug('Fetching url: %s' % url)
  request = urllib2.Request(url, None, std_headers)
  answer = urllib2.urlopen(request)
  str = answer.read()
  lines = str.splitlines()
  return lines

#<url quality="EQ">http://artestras.wmod.rd.llnw.net/geo/arte7/EUR_DE_FR/arteprod/A7_SGT_ENC_12_042206-000-A_PG_EQ_DE.mp4</url>
#<url quality="hd">rtmp://artestras.fcod.llnwd.net/a3903/o35/MP4:geo/videothek/EUR_DE_FR/arteprod/A7_SGT_ENC_04_042206-000-A_PG_HQ_DE?h=86f507add6f94b584f54722a08b75cef</url>
#<url quality="sd">rtmp://artestras.fcod.llnwd.net/a3903/o35/MP4:geo/videothek/EUR_DE_FR/arteprod/A7_SGT_ENC_02_042206-000-A_PG_MQ_DE?h=f31e2b017f30ca3c8d44e5410a9bf272</url>

def flvfetch(url, name):
 n = 0
 for a in range(100):
  for i in range(10):
    out = ""
    log.info('Download %s (try: %d)' % (name, i))
    p = subprocess.Popen(
      [ 'flvstreamer',
        '-r', url,
        '-e',
        '--flv',
        name ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT )
    log.debug('Calling: flvstreamer -r %s -e --flv %s ' % (url, name))
    (out, err) = p.communicate()
    log.debug('Output:\n%s\n' % out)
    cont = False
    line = out
    match = retry_re.search(line)
    if match:
      cont = True
    else:
      match = packerr_re.search(line)
      if match:
        cont = True
        log.warn('Packet error - retrying')
        time.sleep(4)
    if not cont:
      break

  t = os.path.getsize(name)
  if n != 0 and t == n:
    break
  n = t
  log.info('Trying to download more (filesize: %d MiB).' % (n/1024.0/1024.0) )
  time.sleep(3)


def check_url(url, name):
  match = restricted_re.search(url)
  if match:
    log.error('Video %s is only available between 23h and 5h (yeah, right) ...' % name )
    return False
  match = fallback_re.search(url)
  if match:
    log.error('Video %s is not available anymore' % name)
    return False
  return True
  

def getvideos(xml, name):
  urls = []
  for line in xml:
    match = url_re.search(line)
    if match:
      log.debug('Found Url: %s %s' % (match.group(1), match.group(2)))
      urls.append((match.group(1), match.group(2)))
  if len(urls) == 0:
    log.error('Did not find any urls!')
    return
  found = False
  for url in urls:
    if check_url(url[1], name) == False:
      errors = True
      return
    if url[0] == 'hd':
      flvfetch(url[1], name)
      found = True
      break
  if found == False:
    errors = True
    log.error('Could not find HD url for %s' % name)


def download(url):
  log.debug('Fetching: %s' % url)
  lines = fetch(url)
  log.debug('Fetchid: %s' % lines)
  for line in lines:
    match = id_re.search(line)
    if (match):
      log.debug('Matched: |%s|%s|' % (match.group(1), match.group(2)))
      # http://videos.arte.tv/de/do_delegate/videos/hauptsache_haltbar-6772040,view,strmVideoAsPlayerXml.xml
      xmlurl = 'http://videos.arte.tv%s%s,view,strmVideoAsPlayerXml.xml' % (match.group(1), match.group(2))
      name = '%s.m4v' % match.group(2)
      xml = fetch(xmlurl)
      getvideos(xml, name)
      return
  log.error('Did not find any ID!')

flvver_re = re.compile('([a-zA-Z]+) v([0-9.]+)([a-z])?([0-9])?')

def test():
  import os 
  try:
    p = subprocess.Popen(['flvstreamer', '-h'],
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    (out, err) = p.communicate()
    if p.returncode != 0:
      log.error('Error executing flvstreamer: %d exit-code' % ret)
      sys.exit(13)
    first = out.splitlines()[0]
    match = flvver_re.search(first)
    if match:
      if match.group(1) != 'FLVStreamer':
        log.error('Unexpected FLVStreamer name: %s' % match.group(1))
        sys.exit(14)
      if float(match.group(2)) < 2.1:
        log.error('Need FLVstreamer version >= 2.1 (found %s)'
            % match.group(2))
        sys.exit(15)
    else:
      log.error('Could not match FLVStreamer version string: %s' % first)
      sys.exit(16)
  except (OSError, IOError), err:
    log.error('Could not call flvstreamer: %s' % str(err) )
    sys.exit(23)

def enable_debug_output(option, opt, value, parser):
  log.setLevel(logging.DEBUG)
  handler.setLevel(logging.DEBUG)
  log.debug('Enable DEBUG output')

# call e.g.:
# ./arte-dl http://videos.arte.tv/de/videos/hauptsache_haltbar-3334828.html

if __name__ == '__main__':
  import optparse
  opts = optparse.OptionParser(
    usage='Usage: %prog  (option)* (url)+',
    version=program_version,
    conflict_handler='resolve',
  )
  opts.add_option('-h', '--help',
    action='help', help='this screen')
  opts.add_option('-v', '--verbose',
    action='callback', callback=enable_debug_output)
  (o, args) = opts.parse_args()
  test()
  for url in args:
    download(url)
  sys.exit(errors)


